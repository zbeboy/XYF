/*
 * This file is generated by jOOQ.
 */
package com.rongxingyn.xyf.domain.tables;


import com.rongxingyn.xyf.domain.Indexes;
import com.rongxingyn.xyf.domain.Keys;
import com.rongxingyn.xyf.domain.Xyf;
import com.rongxingyn.xyf.domain.tables.records.AuthoritiesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Authorities extends TableImpl<AuthoritiesRecord> {

    /**
     * The reference instance of <code>xyf.authorities</code>
     */
    public static final Authorities AUTHORITIES = new Authorities();
    private static final long serialVersionUID = 119177220;
    /**
     * The column <code>xyf.authorities.username</code>.
     */
    public final TableField<AuthoritiesRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");
    /**
     * The column <code>xyf.authorities.authority</code>.
     */
    public final TableField<AuthoritiesRecord, String> AUTHORITY = createField("authority", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>xyf.authorities</code> table reference
     */
    public Authorities() {
        this(DSL.name("authorities"), null);
    }

    /**
     * Create an aliased <code>xyf.authorities</code> table reference
     */
    public Authorities(String alias) {
        this(DSL.name(alias), AUTHORITIES);
    }

    /**
     * Create an aliased <code>xyf.authorities</code> table reference
     */
    public Authorities(Name alias) {
        this(alias, AUTHORITIES);
    }

    private Authorities(Name alias, Table<AuthoritiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authorities(Name alias, Table<AuthoritiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthoritiesRecord> getRecordType() {
        return AuthoritiesRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xyf.XYF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHORITIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthoritiesRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORITIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthoritiesRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthoritiesRecord>>asList(Keys.KEY_AUTHORITIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthoritiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthoritiesRecord, ?>>asList(Keys.AUTHORITIES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorities as(String alias) {
        return new Authorities(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authorities as(Name alias) {
        return new Authorities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorities rename(String name) {
        return new Authorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorities rename(Name name) {
        return new Authorities(name, null);
    }
}
